- name: configure mysql server
  hosts: mysql
  become: yes
  vars:
    mysql_root_password: ExpenseApp@1
  tasks:
    - name: Install MySQL libraries
      ansible.builtin.pip:
        name: "{{ item }}"
      loop: # these are python libraries, required to connect to mysql server, we will see an error without these while running the playbook
        - cryptography # this package is required for error handling to work fine.
        - PyMySQL
    - name: Install MySQL server
      ansible.builtin.package:
        name: mysql-server
        state: installed

    - name: start and enable mysql server
      ansible.builtin.service:
        name: mysqld
        state: started
        enabled: yes

    - name: connect to mysql server
      community.mysql.mysql_info:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_host: mysql.daws82s.online
      register: mysql_info # to store the output of the task
      ignore_errors: true # error handling
      #  we set ignore errrors as true, so it will not exit if there is an error(root password not set), it will continue to next task

    - name: print the output
      ansible.builtin.debug:
        msg: "MySQL info: {{ mysql_info }}"

    - name: setup root password # this task will skip when root password is already set.
      ansible.builtin.command: " mysql_secure_installation --set-root-pass {{ mysql_root_password }} "
      when: mysql_info.failed is true #run when password is not set - true "t" is lowercase
      # using output of previous task as an input to this task, to check whether root password is set are not
      # this is not idempotent since it command module, we have to control it using when condition.
      # Checking exist status here similar to shell scripting.
